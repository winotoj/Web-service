//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WcfTodoClient.TodoService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Todo", Namespace="http://schemas.datacontract.org/2004/07/WcfTodoServer")]
    [System.SerializableAttribute()]
    public partial class Todo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DueDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TaskField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DueDate {
            get {
                return this.DueDateField;
            }
            set {
                if ((this.DueDateField.Equals(value) != true)) {
                    this.DueDateField = value;
                    this.RaisePropertyChanged("DueDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDone {
            get {
                return this.IsDoneField;
            }
            set {
                if ((this.IsDoneField.Equals(value) != true)) {
                    this.IsDoneField = value;
                    this.RaisePropertyChanged("IsDone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Task {
            get {
                return this.TaskField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskField, value) != true)) {
                    this.TaskField = value;
                    this.RaisePropertyChanged("Task");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TodoService.ITodoService")]
    public interface ITodoService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/AddTodo", ReplyAction="http://tempuri.org/ITodoService/AddTodoResponse")]
        void AddTodo(WcfTodoClient.TodoService.Todo todo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/AddTodo", ReplyAction="http://tempuri.org/ITodoService/AddTodoResponse")]
        System.Threading.Tasks.Task AddTodoAsync(WcfTodoClient.TodoService.Todo todo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/GetAllTodos", ReplyAction="http://tempuri.org/ITodoService/GetAllTodosResponse")]
        WcfTodoClient.TodoService.Todo[] GetAllTodos();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/GetAllTodos", ReplyAction="http://tempuri.org/ITodoService/GetAllTodosResponse")]
        System.Threading.Tasks.Task<WcfTodoClient.TodoService.Todo[]> GetAllTodosAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/DeleteTodo", ReplyAction="http://tempuri.org/ITodoService/DeleteTodoResponse")]
        void DeleteTodo(long Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/DeleteTodo", ReplyAction="http://tempuri.org/ITodoService/DeleteTodoResponse")]
        System.Threading.Tasks.Task DeleteTodoAsync(long Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/UpdateTodo", ReplyAction="http://tempuri.org/ITodoService/UpdateTodoResponse")]
        void UpdateTodo(WcfTodoClient.TodoService.Todo todo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/UpdateTodo", ReplyAction="http://tempuri.org/ITodoService/UpdateTodoResponse")]
        System.Threading.Tasks.Task UpdateTodoAsync(WcfTodoClient.TodoService.Todo todo);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITodoServiceChannel : WcfTodoClient.TodoService.ITodoService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TodoServiceClient : System.ServiceModel.ClientBase<WcfTodoClient.TodoService.ITodoService>, WcfTodoClient.TodoService.ITodoService {
        
        public TodoServiceClient() {
        }
        
        public TodoServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TodoServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TodoServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TodoServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddTodo(WcfTodoClient.TodoService.Todo todo) {
            base.Channel.AddTodo(todo);
        }
        
        public System.Threading.Tasks.Task AddTodoAsync(WcfTodoClient.TodoService.Todo todo) {
            return base.Channel.AddTodoAsync(todo);
        }
        
        public WcfTodoClient.TodoService.Todo[] GetAllTodos() {
            return base.Channel.GetAllTodos();
        }
        
        public System.Threading.Tasks.Task<WcfTodoClient.TodoService.Todo[]> GetAllTodosAsync() {
            return base.Channel.GetAllTodosAsync();
        }
        
        public void DeleteTodo(long Id) {
            base.Channel.DeleteTodo(Id);
        }
        
        public System.Threading.Tasks.Task DeleteTodoAsync(long Id) {
            return base.Channel.DeleteTodoAsync(Id);
        }
        
        public void UpdateTodo(WcfTodoClient.TodoService.Todo todo) {
            base.Channel.UpdateTodo(todo);
        }
        
        public System.Threading.Tasks.Task UpdateTodoAsync(WcfTodoClient.TodoService.Todo todo) {
            return base.Channel.UpdateTodoAsync(todo);
        }
    }
}
